///////////////////////////////////////////////////////////////////////////

                              
                             Workshop - #10
Full Name  : Farbod Moayeri
Student ID#: 134395227
Email      : fmoayeri2@myseneca.ca
Section    : NBB

Authenticity Declaration:

I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////


This workshop introduced me to the concept of template functions and how to properly implement them and utilize them
with classes of different types. I learned in the notes that templates are generated at compile time to fit the needs
of each invocation of the template. Each time a template is invoked, new code is basically genereted for the template
to work correctly. This is called parametric or generic polymorphism, a polymorphism that takes abstraction to the
extreme at the cost of compile time resources. In this workshop I learned first hand how to create such templates
with the template<typename Identifier> keyword. I created two seperate templates, and I was instructed to write
notes above their implementation about what they need in order to function properly. Here are their notes:

// In order for this template function to work, you must supply it with four arguments when you invoke it
// param 1: This is a template object that must be of the Collection type
// param 2: An array that has the same type as the first param is received as an argument
// param 3: The size of the array is sent as the argument
// param 4: Another type of template object is sent that represents the key to be searched for in the array
// The first template type must have a public add method that can be invoked by the template function
// The add method must be able to accept the same object type that is invoking it as an argument
// The object sent as the second argument must have a '==' operator overload implementation that is public
// for the search() template function to utilize and the implementation of the '==' operator overload must accept
// the type that KeyT as a right hand argument of '=='
template<typename T, typename KeyT>
bool search(Collection<T>& collection, const T colArray[], const size_t size, const KeyT& key)


// In order for listArrayElements to be invoked and function properly, There must be a const char* argument sent,
// , an array of any object type sent and the size of the array sent
// The object array sent as the second argument must have a '<<' operator overload implementation that deals with
// an ostream object on the left side and an object of its own type on the right side
template<typename T>
void listArrayElements(const char* title, const T objectArray[], const size_t size)
	
